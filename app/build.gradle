plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.example.qrgo'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.qrgo"
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
    
    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

// Code from https://gist.github.com/burntcookie90/10066136
android.libraryVariants.all { variant ->

    task("${variant.name}Javadoc", type: Javadoc) {
        title = "$name $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar =
                "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.linksOffline("http://d.android.com/reference/", " file:///${android.plugin.sdkDirectory}/docs/reference");
        options.stylesheetFile = new File(projectDir, "stylesheet.css");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

task wrapper(type: Wrapper){
    gradleVersion = '7.4.0'
}
task prepareKotlinBuildScriptModel {

}
repositories {
    //Zxing embedded
    mavenCentral()
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation 'com.squareup.picasso:picasso:2.8'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:31.2.2')
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-installations:17.0.0'
    implementation 'com.google.firebase:firebase-auth-ktx'

    // Mockito
    testImplementation 'org.mockito:mockito-core:2.19.0'


    // JUnit
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.2'


    // Roboelectric
    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation "androidx.test:rules:1.5.0"
    androidTestImplementation "com.jayway.android.robotium:robotium-solo:5.2.1"


    //Multidex
    implementation 'com.android.support:multidex:1.0.3'

    //Zxing embedded
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'

    implementation 'androidx.multidex:multidex:2.0.1'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'


    //Google play services
    implementation 'com.google.android.gms:play-services-location:21.0.1'

    // osmdroid
    implementation 'org.osmdroid:osmdroid-android:6.1.14'
    implementation 'org.osmdroid:osmdroid-geopackage:6.1.14'
    implementation 'org.osmdroid:osmdroid-wms:6.1.14'
    implementation 'org.osmdroid:osmdroid-mapsforge:6.1.14'


}
